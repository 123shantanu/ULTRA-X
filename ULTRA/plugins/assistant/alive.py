# COPYRIGHT (C) 2021-2022 BY LEGENDX22
# modify by madboy482 and alain_champion

from ULTRA import bot
from LEGENDX import xbot, ID
import heroku3
from telethon import events
from ULTRA import StartTime
import time
import datetime

from telethon import events, Button, custom
import re, os
from LEGENDX import PHOTO, xbot, BOT, VERSION
from ULTRA import bot
@xbot.on(events.NewMessage(pattern=("/alive")))
async def awake(event):
  LEGENDX = f"H·¥á ü ü·¥è !! T ú…™s …™s **{BOT}**\n\n"
  LEGENDX += "**A ü ü s ès·¥õ·¥á·¥çs ·¥°·¥è Ä·¥ã…™…¥…¢ ·¥ò Ä·¥è·¥ò·¥á Ä ü è...**\n\n"
  LEGENDX += f"**{BOT} V·¥á Äs…™·¥è…¥** : `{VERSION}`\n\n"
  LEGENDX += f"**Us·¥á Ä** : @{bot.me.username}\n\n"
  LEGENDX += "**F·¥ú ü ü è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö  ô·¥è·¥õ...**\n\n"
  LEGENDX += "**T·¥á ü·¥á·¥õ ú·¥è…¥** : `1.20`\n\n"
  LEGENDX += "~~ **T ú·¥Ä…¥·¥ãs “ì·¥è Ä ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥ç·¥á** !!"
  BUTTON = [[Button.url("M·¥Äs·¥õ·¥á Ä", f"https://t.me/{bot.me.username}"), Button.url(f"{BOT} R·¥á·¥ò·¥è", "https://github.com/ULTRA-OP/ULTRA-X")]]
  BUTTON += [[custom.Button.inline("R·¥á·¥ò·¥ès…™·¥õ·¥è Ä…™·¥ás ¬ª¬ª", data="LEGENDX")]]
  await xbot.send_file(event.chat_id, PHOTO, caption=LEGENDX,  buttons=BUTTON)




@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"LEGENDX")))
async def callback_query_handler(event):
# inline by LEGENDX22 and PROBOY22 üî•
  PROBOYX = [[Button.url("R·¥á·¥ò·¥è U ü·¥õ Ä·¥ÄX", "https://github.com/ULTRA-OP/ULTRA-X")]]
  PROBOYX +=[[Button.url("D·¥á·¥ò ü·¥è è U ü·¥õ Ä·¥ÄX", "https://dashboard.heroku.com/new?button-url=https%3A%2F%2Fgithub.com%2FLEGENDXOP%2Flegendpack&template=https%3A%2F%2Fgithub.com%2FLEGENDXOP%2Flegendpack")]]
  PROBOYX +=[[Button.url("T·¥ú·¥õ·¥è Ä…™·¥Ä ü", "https://youtu.be/rGCSSFPsS4Q"), Button.url("S·¥õ Ä…™…¥…¢ S·¥áss…™·¥è…¥", "https://repl.it/@legendx22/LEGEND-BOT#main.py")]]
  PROBOYX +=[[Button.url("A·¥ò…™ I·¥Ö & A·¥ò…™ H·¥Äs ú", "https://t.me/usetgxbot"), Button.url("R·¥á·¥Ö…™s", "https://redislabs.com")]]
  PROBOYX +=[[Button.url("S·¥ú·¥ò·¥ò·¥è Ä·¥õ C ú·¥Ä…¥…¥·¥á ü", "https://t.me/LEGENDBOT_OFFICIAL"), Button.url("S·¥ú·¥ò·¥ò·¥è Ä·¥õ G Ä·¥è·¥ú·¥ò", "https://t.me/UltraXChat")]]
  PROBOYX +=[[custom.Button.inline("¬´¬´ A ü…™·¥†·¥á", data="PROBOY")]]
  await event.edit(text=f"A ü ü D·¥á·¥õ·¥Ä…™ üs O“ì R·¥á·¥ò·¥ès", buttons=PROBOYX)


@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b"PROBOY")))
async def callback_query_handler(event):
# inline by LEGENDX22 and PROBOY22 üî•
  LEGENDX = f"H·¥á ü ü·¥è !! T ú…™s …™s **{BOT}**\n\n"
  LEGENDX += "**A ü ü s ès·¥õ·¥á·¥çs ·¥°·¥è Ä·¥ã…™…¥…¢ ·¥ò Ä·¥è·¥ò·¥á Ä ü è...**\n\n"
  LEGENDX += f"**{BOT} V·¥á Äs…™·¥è…¥** : `{VERSION}`\n\n"
  LEGENDX += f"**Us·¥á Ä** : @{bot.me.username}\n\n"
  LEGENDX += "**F·¥ú ü ü è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö  ô·¥è·¥õ...**\n\n"
  LEGENDX += "**T·¥á ü·¥á·¥õ ú·¥è…¥** : `1.20`\n\n"
  LEGENDX += "~~ **T ú·¥Ä…¥·¥ãs “ì·¥è Ä ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢ ·¥ç·¥á** !!"
  BUTTONS = [[Button.url("M·¥Äs·¥õ·¥á Ä", f"https://t.me/{bot.me.username}"), Button.url(f"{BOT} R·¥á·¥ò·¥è", "https://github.com/ULTRA-OP/ULTRA-X")]]
  BUTTONS += [[custom.Button.inline("R·¥á·¥ò·¥ès…™·¥õ·¥è Ä…™·¥ás ¬ª¬ª", data="LEGENDX")]]
  await event.edit(text=LEGENDX, buttons=BUTTONS)


@xbot.on(events.NewMessage(pattern=("/repo")))
async def repo(event):
  await xbot.send_message(event.chat, "**H·¥á Ä·¥á Is T ú·¥á R·¥á·¥ò·¥è F·¥è Ä œÖ‚Ñì—Ç—èŒ± œá Us·¥á Ä ô·¥è·¥õ** \n\nF·¥è Ä A…¥ è H·¥á ü·¥ò :- @UltraXOT", buttons=[[Button.url("üî∞ R·¥á·¥ò·¥è üî∞", "https://github.com/ULTRA-OP/ULTRA-X")]])


def get_readable_time(seconds: int) -> str:
    count = 0
    ping_time = ""
    time_list = []
    time_suffix_list = ["s", "m", "h", "days"]

    while count < 4:
        count += 1
        if count < 3:
            remainder, result = divmod(seconds, 60)
        else:
            remainder, result = divmod(seconds, 24)
        if seconds == 0 and remainder == 0:
            break
        time_list.append(int(result))
        seconds = int(remainder)

    for x in range(len(time_list)):
        time_list[x] = str(time_list[x]) + time_suffix_list[x]
    if len(time_list) == 4:
        ping_time += time_list.pop() + ", "

    time_list.reverse()
    ping_time += ":".join(time_list)

    return ping_time

@xbot.on(events.NewMessage(pattern=None))
async def ok(event):
    msg = str(event.text)
    if not msg == "/ping":
     return

    start_time = datetime.datetime.now()
    message = await event.reply("_.._.._Pinging_.._.._")
    end_time = datetime.datetime.now()
    pingtime = end_time - start_time
    telegram_ping = str(round(pingtime.total_seconds(), 2)) + "s"
    uptime = get_readable_time((time.time() - StartTime))
    await message.edit(
        "<b><i>‚òû P·¥è…¥…¢ !!</i></b>\n"
        "<b>‚û• T…™·¥ç·¥á T·¥Ä·¥ã·¥á…¥:</b> <code>{}</code>\n"
        "<b>‚û• S·¥á Ä·¥†…™·¥Ñ·¥á U·¥ò·¥õ…™·¥ç·¥á:</b> <code>{}</code>".format(telegram_ping, uptime),
        parse_mode="html",
    )


Heroku = heroku3.from_key(Var.HEROKU_API_KEY)
@xbot.on(events.NewMessage(pattern="/set"))
async def heroku(event):
  if event.sender_id == bot.me.id or event.sender_id == ID:
    pro = [[Button.inline("‚Ä¢‚Ä¢‚Ä¢ B·¥è·¥õ N…™·¥Ñ·¥ã…¥·¥Ä·¥ç·¥á ‚Ä¢‚Ä¢‚Ä¢", data="nick")]]
    pro += [[Button.inline("‚Ä¢‚Ä¢‚Ä¢ A ü…™·¥†·¥á P ú·¥è·¥õ·¥è ‚Ä¢‚Ä¢‚Ä¢", data="alive_photo")]]
    pro += [[Button.inline("‚Ä¢‚Ä¢‚Ä¢ F ô·¥Ä…¥ G Ä·¥è·¥ú·¥ò I·¥Ö‚Ä¢‚Ä¢‚Ä¢", data="fban_id")]]
    pro += [[Button.inline("‚Ä¢‚Ä¢‚Ä¢ A ü…™·¥†·¥á N·¥Ä·¥ç·¥á ‚Ä¢‚Ä¢‚Ä¢", data="alive_name")]]
    pro += [[Button.inline("‚Ä¢‚Ä¢‚Ä¢ S·¥õ Ä…™…¥…¢ S·¥áss…™·¥è…¥ ‚Ä¢‚Ä¢‚Ä¢", data="session")]]
    await xbot.send_message(event.chat_id, "H·¥á ü ü·¥è M·¥Äs·¥õ·¥á Ä, W ú·¥Ä·¥õ D·¥è Y·¥è·¥ú W·¥Ä…¥…¥·¥Ä S·¥á·¥õ T·¥è·¥Ö·¥Ä è ?", buttons=pro)
  else:
    await event.reply("Hey kid go away and don't use my bot deploy your own bot üòï !!\n\nF·¥è Ä A…¥ è H·¥á ü·¥ò As·¥ã I…¥ @UltraXChat !")
@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b'ass_back')))
async def heroku(event):
  if event.sender_id == bot.me.id or event.sender_id == ID:
    pro = [[Button.inline("‚Ä¢‚Ä¢‚Ä¢ B·¥è·¥õ N…™·¥Ñ·¥ã…¥·¥Ä·¥ç·¥á ‚Ä¢‚Ä¢‚Ä¢", data="nick")]]
    pro += [[Button.inline("‚Ä¢‚Ä¢‚Ä¢ A ü…™·¥†·¥á P ú·¥è·¥õ·¥è ‚Ä¢‚Ä¢‚Ä¢", data="alive_photo")]]
    pro += [[Button.inline("‚Ä¢‚Ä¢‚Ä¢ F ô·¥Ä…¥ G Ä·¥è·¥ú·¥ò I·¥Ö‚Ä¢‚Ä¢‚Ä¢", data="fban_id")]]
    pro += [[Button.inline("‚Ä¢‚Ä¢‚Ä¢ A ü…™·¥†·¥á N·¥Ä·¥ç·¥á ‚Ä¢‚Ä¢‚Ä¢", data="alive_name")]]
    pro += [[Button.inline("‚Ä¢‚Ä¢‚Ä¢ S·¥õ Ä…™…¥…¢ S·¥áss…™·¥è…¥ ‚Ä¢‚Ä¢‚Ä¢", data="session")]]
    await event.edit("H·¥á ü ü·¥è M·¥Äs·¥õ·¥á Ä, W ú·¥Ä·¥õ D·¥è Y·¥è·¥ú W·¥Ä…¥…¥·¥Ä S·¥á·¥õ ·¥õ·¥è·¥Ö·¥Ä è ?", buttons=pro)
  else:
    await event.answer("**Hey kid go away and don't use my bot deploy your own bot** üòï !!\n\nF·¥è Ä A…¥ è H·¥á ü·¥ò As·¥ã I…¥ @UltraXChat !", alert=True)
@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b'setnick')))
async def heroku(event):
  Pro = bot.me.id
  global Heroku
  app = Heroku.app(Var.HEROKU_APP_NAME)
  heroku_var = app.config()
  if event.sender_id == Pro or event.sender_id == ID:
     if event.is_private:
        await event.delete()
        async with xbot.conversation(event.chat_id) as pro:
          await pro.send_message("Give your value....")
          op = await pro.get_response()
          await pro.send_message("Now wait..I am restarting./.\./.\.")
          try:
            heroku_var['BOT_NICK_NAME'] = f'{op.message}'
          except Exception as e:
            await event.reply(f"{e}")  
     else:
         warn = "Please use this in PM"
         await event.answer(warn, alert=True)
  else:
     pro = "Chala ja bhosdike.."
     await event.answer(pro, alert=True)
@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b'setsudo')))
async def heroku(event):
  Pro = bot.me.id
  global Heroku
  app = Heroku.app(Var.HEROKU_APP_NAME)
  heroku_var = app.config()
  if event.sender_id == Pro or event.sender_id == ID:
     if event.is_private:
        await event.delete()
        async with xbot.conversation(event.chat_id) as pro:
          await pro.send_message("Give your sudo user id")
          op = await pro.get_response()
          await pro.send_message("Now wait..I am restarting./.\./.\.")
          try:
            heroku_var['SUDO_USERS'] = f'{op.message}'
          except Exception as e:
            await event.reply(f"{e}")  
     else:
         warn = "Please use this in PM"
         await event.answer(warn, alert=True)
  else:
     pro = "Chala ja bhosdike.."
     await event.answer(pro, alert=True)

@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b'setphoto')))
async def heroku(event):
  Pro = bot.me.id
  global Heroku
  app = Heroku.app(Var.HEROKU_APP_NAME)
  heroku_var = app.config()
  if event.sender_id == Pro or event.sender_id == ID:
     if event.is_private:
        await event.delete()
        async with xbot.conversation(event.chat_id) as pro:
          await pro.send_message("Give your value....")
          op = await pro.get_response()
          await pro.send_message("Now wait..I am restarting./.\./.\.")
          try:
            heroku_var['ALIVE_PHOTTO'] = f'{op.message}'
          except Exception as e:
            await event.reply(f"{e}")  
     else:
         warn = "Please use this in PM"
         await event.answer(warn, alert=True)
  else:
     pro = "Chala ja bhosdike.."
     await event.answer(pro, alert=True)

@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b'setfban')))
async def heroku(event):
  Pro = bot.me.id
  global Heroku
  app = Heroku.app(Var.HEROKU_APP_NAME)
  heroku_var = app.config()
  if event.sender_id == Pro or event.sender_id == ID:
     if event.is_private:
        await event.delete()
        async with xbot.conversation(event.chat_id) as pro:
          await pro.send_message("Give your value....")
          op = await pro.get_response()
          await pro.send_message("Now wait..I am restarting./.\./.\.")
          try:
            heroku_var['FBAN_GROUP_ID'] = f'{op.message}'
          except Exception as e:
            await event.reply(f"{e}")  
     else:
         warn = "Please use this in PM"
         await event.answer(warn, alert=True)
  else:
     pro = "Chala ja bhosdike.."
     await event.answer(pro, alert=True)

@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b'setname')))
async def heroku(event):
  Pro = bot.me.id
  global Heroku
  app = Heroku.app(Var.HEROKU_APP_NAME)
  heroku_var = app.config()
  if event.sender_id == Pro or event.sender_id == Id:
     if event.is_private:
        await event.delete()
        async with xbot.conversation(event.chat_id) as pro:
          await pro.send_message("Give your value....")
          op = await pro.get_response()
          await pro.send_message("Now wait..I am restarting./.\./.\.")
          try:
            heroku_var['ALIVE_NAME'] = f'{op.message}'
          except Exception as e:
            await event.reply(f"{e}")  
     else:
         warn = "Please use this in PM"
         await event.answer(warn, alert=True)
  else:
     pro = "Chala ja bhosdike.."
     await event.answer(pro, alert=True)


@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b'setsession')))
async def heroku(event):
  Pro = bot.me.id
  global Heroku
  app = Heroku.app(Var.HEROKU_APP_NAME)
  heroku_var = app.config()
  if event.sender_id == Pro or event.sender_id == ID:
     if event.is_private:
        await event.delete()
        async with xbot.conversation(event.chat_id) as pro:
          await pro.send_message("Give your value....")
          op = await pro.get_response()
          await pro.send_message("Now wait..I am restarting./.\./.\.")
          try:
            heroku_var['STRING_SESSION'] = f'{op.message}'
          except Exception as e:
            await event.reply(f"{e}")  
     else:
         warn = "Please use this in PM"
         await event.answer(warn, alert=True)
  else:
     pro = "Chala ja bhosdike.."
     await event.answer(pro, alert=True)

@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b'nick')))
async def call_back(event):
  legend = [[Button.inline("SET ?", data='setnick')]]
  legend += [[Button.inline("¬´¬´ BACK", data='ass_back')]]
  if event.is_private:
    await event.edit("Want to set the bot name", buttons=legend)
  else:
    pro = "Please use this in PM"
    await event.answer(pro, alert=False)



@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b'alive_name')))
async def call_back(event):
  legend = [[Button.inline("SET ?", data='setname')]]
  legend += [[Button.inline("¬´¬´ BACK", data='ass_back')]]
  if event.is_private:
    await event.edit("Want to set your name", buttons=legend)
  else:
    pro = "Please use this in PM"
    await event.answer(pro, alert=False)


@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b'session')))
async def call_back(event):
  legend = [[Button.inline("SET ?", data='setsession')]]
  legend += [[Button.inline("¬´¬´ BACK", data='ass_back')]]
  if event.is_private:
    await event.edit("Want to set your StringSession", buttons=legend)
  else:
    pro = "Please use this in PM"
    await event.answer(pro, alert=False)



@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b'addsudo')))
async def call_back(event):
  legend = [[Button.inline("SET ?", data='setsudo')]]
  legend += [[Button.inline("¬´¬´ BACK", data='ass_back')]]
  if event.is_private:
    await event.edit("Want to set the SUDO USER", buttons=legend)
  else:
    pro = "Please use this in PM"
    await event.answer(pro, alert=False)

@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b'fban_id')))
async def call_back(event):
  legend = [[Button.inline("SET ?", data='setfban')]]
  legend += [[Button.inline("¬´¬´ BACK", data='ass_back')]]
  if event.is_private:
    await event.edit("Want to set the FBAN ID", buttons=legend)
  else:
    pro = "Please use this in PM"
    await event.answer(pro, alert=False)



@xbot.on(events.callbackquery.CallbackQuery(data=re.compile(b'alive_photo')))
async def call_back(event):
  legend = [[Button.inline("SET ?", data='setphoto')]]
  legend += [[Button.inline("¬´¬´ BACK", data='ass_back')]]
  if event.is_private:
    await event.edit("Want to set your photo", buttons=legend)
  else:
    pro = "Please use this in PM"
    await event.answer(pro, alert=False)
